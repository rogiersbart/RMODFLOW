% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/execute.R
\name{rmf_execute}
\alias{rmf_execute}
\alias{rmf_execute.character}
\alias{rmf_execute.modflow}
\title{Execute a MODFLOW model}
\usage{
rmf_execute(...)

\method{rmf_execute}{character}(
  path,
  code = "2005",
  evaluate = NULL,
  backup = FALSE,
  preprocess = NULL,
  ui = NULL,
  convergence = "Normal termination",
  precision = "single"
)

\method{rmf_execute}{modflow}(
  modflow,
  code = "2005",
  evaluate = NULL,
  ui = NULL,
  convergence = "Normal termination",
  precision = "single"
)
}
\arguments{
\item{path}{Path to the NAM file. Typically with extension \code{.nam}.}

\item{code}{Name of the MODFLOW variant to use, or path to the executable.}

\item{evaluate}{Vector of PVAL file parameter values to evaluate. This should
be a named vector if not all parameters are provided in their order of
occurrence, where the names (can be regular expressions to) match the
parameter names. Parameters that are not mentioned take the value from the
PVAL file. If \code{NULL} (default), no values are changed in the original
PVAL file.}

\item{backup}{Logical. Should a backup (with \code{.old} suffix) of the original
PVAL file be created? Defaults to \code{FALSE}.}

\item{preprocess}{Function to do preprocessing, which takes the model pval
object as input, and returns another pval object. See details for how to
use this. Defaults to NULL.}

\item{ui}{If NULL (default), MODFLOW output is shown in the R console. If
\code{"none"}, the output is suppressed.}

\item{convergence}{Character. The message in the terminal output used
to check for convergence.}

\item{precision}{Character. Specifies if 'single' (default) or 'double' precision executable is used (MODFLOW-2005 only).}

\item{modflow}{modflow object}
}
\value{
Invisible list with start and end time, elapsed run time, a logical
indicating normal termination, and the stdout output, when done for an on
disk model. Full \code{modflow} object including all results otherwise (in
memory model).
}
\description{
These functions execute MODFLOW models.
}
\details{
The \code{preprocess} argument can be used for different purposes:
\itemize{
\item Implementing derived parameters: One can make some of the pval parameters
depend on others. The \code{preprocess} function should in this case just
modify the pval object, and return it. Note that this means that the values
of derived parameters specified in \code{evaluate} might be changed in this
case.
\item Implementing any kind of parameter that is not directly supported by
MODFLOW. This means the \code{preprocess} function should have some side
effects, modifying some of the MODFLOW files. For this purpose, it is
convenient to add extra parameters at the end of the pval file, while
keeping the number of parameters (np) constant, and equal to the number
of MODFLOW-supported parameters.
}
}
\seealso{
\code{\link[=rmf_install]{rmf_install()}} for external code installation,\cr
\code{\link[=rmf_analyze]{rmf_analyze()}} for local sensitivity analysis, and\cr
\code{\link[=rmf_optimize]{rmf_optimize()}} for local calibration.
}
